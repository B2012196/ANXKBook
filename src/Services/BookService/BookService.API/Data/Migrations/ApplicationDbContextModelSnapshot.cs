// <auto-generated />
using System;
using BookService.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookService.API.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BookService.API.Models.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Author")
                        .HasColumnType("longtext");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<string>("PublishingHouse")
                        .HasColumnType("longtext");

                    b.Property<int>("Quatity")
                        .HasColumnType("int");

                    b.Property<Guid?>("StatusId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BookId");

                    b.HasIndex("GenreId");

                    b.HasIndex("StatusId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookService.API.Models.BookCopy", b =>
                {
                    b.Property<Guid>("BookCopyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookStatusId")
                        .HasColumnType("char(36)");

                    b.HasKey("BookCopyId");

                    b.HasIndex("BookId");

                    b.HasIndex("BookStatusId");

                    b.ToTable("BookCopys");
                });

            modelBuilder.Entity("BookService.API.Models.Genre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BookService.API.Models.Status", b =>
                {
                    b.Property<Guid>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("StatusId");

                    b.ToTable("BookStatus");
                });

            modelBuilder.Entity("BookService.API.Models.Book", b =>
                {
                    b.HasOne("BookService.API.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookService.API.Models.Status", null)
                        .WithMany("Books")
                        .HasForeignKey("StatusId");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookService.API.Models.BookCopy", b =>
                {
                    b.HasOne("BookService.API.Models.Book", "Book")
                        .WithMany("BookCopys")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookService.API.Models.Status", "BookStatus")
                        .WithMany("BookCopys")
                        .HasForeignKey("BookStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BookStatus");
                });

            modelBuilder.Entity("BookService.API.Models.Book", b =>
                {
                    b.Navigation("BookCopys");
                });

            modelBuilder.Entity("BookService.API.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookService.API.Models.Status", b =>
                {
                    b.Navigation("BookCopys");

                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
